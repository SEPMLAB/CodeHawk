package org.codehawk.plugin.java.checks;

import java.util.Collections;
import java.util.List;

import org.sonar.check.Rule;
import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
import org.sonar.plugins.java.api.semantic.Symbol;
import org.sonar.plugins.java.api.semantic.Type;
import org.sonar.plugins.java.api.tree.ClassTree;
import org.sonar.plugins.java.api.tree.IdentifierTree;
import org.sonar.plugins.java.api.tree.Tree;
import org.sonar.plugins.java.api.tree.TypeTree;
import org.sonar.plugins.java.api.tree.VariableTree;
import org.sonar.plugins.java.api.tree.Tree.Kind;

@Rule(key = "UnexploitedEncapsulation")
public class UnexploitedEncapsulation extends IssuableSubscriptionVisitor {

    @Override
    public List<Kind> nodesToVisit() {
        return Collections.singletonList(Tree.Kind.CLASS);
    }

    @Override
    public void visitNode(Tree tree) {
        boolean UE = false;
        ClassTree ct = (ClassTree) tree;
        TypeTree tt = ct.superClass();

        if(tt!=null){
            Type t = tt.symbolType();
            Symbol.TypeSymbol Sts = t.symbol();
            ClassTree exct = Sts.declaration();
            if(exct!=null) {
	            List<Tree> lt = exct.members();
	            for(Tree ext : lt){
	                if(ext.is(Kind.VARIABLE)){
	                    Symbol exv = ((VariableTree) ext).symbol();
	                    List<IdentifierTree> exlid = exv.usages();
	                    for(IdentifierTree exid : exlid){
	                        if(exid.parent().is(Kind.CASE_LABEL)){
	                            Tree swc = exid.parent().parent().parent().parent().parent().parent().parent();
	                            if(swc == ct){
	                                UE = true;
	                            }
	                        }
	                    }
	                }
	            }
            }
            if(UE){
                addIssue(exct.openBraceToken().line(), "UnexploitedEncapsulation");
            }
        }
    }
}
